import{j as a,a as e,L as l}from"./index-05365979.js";import{c as i}from"./pymuIco-54c3c2da.js";import{M as s}from"./MascotaTip-ec587e15.js";const d="/assets/celdas-e8609f4b.png",c="/assets/ConceptosBas1-d20219c4.png",t="/assets/ConceptosBas2-662703d1.png",p="/assets/ConceptosBas3-04f1a35c.png",m="/assets/ConceptosBas4-bc94a33b.png",u="/assets/ConceptosBas5-3d968efe.png";const n=({img:r,url:o})=>a("div",{className:"caja-codigo",children:[e("img",{src:r,alt:"codigo-ejemplo"}),e("div",{className:"enlace-codigo",children:e("a",{href:o,target:"_blank",children:"Prueba el código en Replit"})})]}),v=()=>{const r={mascota:i,contenido:"En programación existe el concepto de tipado, el cuál se refiere a cómo se manejan los tipos de datos. C se considera un lenguaje fuertemente tipado debido a que requiere una declaración explícita de los tipos de datos y no permite operaciones entre tipos incompatibles sin una conversión explícita. Esto promueve la integridad y consistencia de los datos en el programa.",contenido2:"Practica todo lo que hemos visto a lo largo de esta lección, experimenta, juega y descubre. Es la mejor forma de aprender y fortalecer los conocimientos en programación. (╹ڡ╹ )"};return a("div",{className:"curso-pagina conceptos-bas-fu",children:[e("div",{className:"titular-curso",children:e("h1",{children:"conceptos básicos"})}),e("section",{children:a("div",{className:"parrafo-flex",children:[e("img",{src:i,alt:"cecy"}),e("p",{children:"Ha llegado el momento de sumergirnos en los conceptos básicos de nuestro curso de programación en C. En este capítulo, exploraremos la estructura básica de un programa en C, aprenderemos sobre variables y tipos de datos, descubriremos los operadores y expresiones que nos permitirán manipular información, y también exploraremos cómo realizar la entrada y salida de datos. Estos conceptos fundamentales sentarán las bases sólidas para que puedas construir programas en C de manera eficiente y comprensible. ( •̀ ω •́ )✧"})]})}),e("div",{className:"subtitulo-curso",children:e("h2",{children:"estructura básica de un programa en C"})}),e("section",{children:a("div",{className:"parrafo-no-flex",children:[a("p",{children:["La forma en que se compone un programa en C es relativamente sencilla, empezaremos por ver el que en el mundo de la programación es tradicional empezar el famoso",e("span",{children:' "hola mundo"'}),":"]}),e(n,{img:c,url:"https://replit.com/@izicodeoficial/Primer-hola-mundo#main.c"}),a("p",{children:["En C, un programa típico comienza con la línea de código ",a("span",{children:['"',"#include <stdio.h>",'"']}),". Esta línea nos permite utilizar las funciones de entrada y salida estándar, como printf y scanf, que son esenciales para interactuar con el usuario y mostrar resultados en la consola."]}),a("p",{children:["A continuación, encontramos la función principal del programa, que se declara como ",e("span",{children:'"int main(void)"'}),". El programa comenzará su ejecución desde esta función. El tipo de retorno ",e("span",{children:'"int"'})," indica que la función devuelve un valor entero al finalizar.",e("span",{children:'"void"'})," indica que la función no acepta parámetros."]}),a("p",{children:["Dentro de las llaves de la función main, puedes escribir el código que deseas ejecutar. En nuestro caso, utilizaremos la función printf para mostrar el mensaje",e("span",{children:' "¡Hola Mundo! ( •̀ ω •́ )✧"'})," en la consola. El ",e("span",{children:'"\\n"'})," al final del mensaje representa un carácter de nueva línea para que el siguiente texto se muestre en una línea separada."]}),a("p",{children:["Finalmente, utilizamos la sentencia ",e("span",{children:'"return 0;"'})," para indicar que el programa ha finalizado correctamente. El valor 0 se utiliza convencionalmente para representar que no hubo errores durante la ejecución del programa."]})]})}),e("div",{className:"subtitulo-curso",children:e("h2",{children:"variables y tipos de datos"})}),a("section",{children:[a("div",{className:"parrafo-tip-flex",children:[a("div",{className:"parrafo",children:[e("p",{children:"En el curso de Fundamentos de Programación, ya tuviste la oportunidad de aprender sobre los conceptos básicos de las variables y los tipos de datos. Ahora, nos adentraremos en cómo funcionan específicamente en el lenguaje C."}),e("p",{children:"En C, las variables son espacios de memoria reservados para almacenar datos. Cada variable tiene un tipo de dato que define el tipo de información que puede contener, como números enteros, números decimales, caracteres, etc. Al compilar el programa, se asigna un espacio de memoria específico para cada variable, lo que permite manipular y operar con esos datos de manera eficiente."}),a("p",{children:["Por ejemplo, si tienes una variable de tipo entero ",e("span",{children:"(int)"})," y deseas asignarle un valor de punto flotante ",e("span",{children:"(float)"}),", en C necesitarías realizar una conversión explícita para asegurarte de que los tipos sean compatibles."]}),a("p",{children:["Esta estricta aplicación de tipos ayuda a garantizar la integridad y consistencia de los datos en el programa. Al ser un lenguaje ",e("span",{children:"fuertemente tipado"}),", C evita errores comunes relacionados con la manipulación inapropiada de los tipos de datos, lo que puede conducir a resultados inesperados o comportamientos indeseables en el programa."]})]}),e(s,{mascota:r.mascota,contenido:r.contenido})]}),a("div",{className:"parrafo-no-flex",children:[e("p",{children:"Pero mejor pasemos a ver el siguiente código para ver de una mejor manera todo lo explicado con anterioridad y de paso veremos como declarar variables en C:"}),e(n,{img:t,url:"https://replit.com/@izicodeoficial/Variables-y-tipos-de-datos-1#main.c"}),a("p",{children:["En este ejemplo, se declaran variables de diferentes tipos: entero de tipo ",e("span",{children:"int"}),", flotante de tipo ",e("span",{children:"float"}),", caracter de tipo ",e("span",{children:"char"}),", doble de tipo ",e("span",{children:"double"})," y largo de tipo ",e("span",{children:"long"}),". Luego, se asignan valores a cada una de ellas."]}),a("p",{children:["Posteriormente, se utilizan las funciones printf para mostrar los valores de las variables en la salida del programa. Los especificadores de formato",e("span",{children:" %d, %f, %c, %lf y %ld"})," se utilizan para imprimir los valores correspondientes de cada tipo de dato."]}),a("p",{children:["Seguramente te preguntes qué significan los tipos ",e("span",{children:"long"})," y ",e("span",{children:"double"})," que mencionamos anteriormente, la principal diferencia esta en los límites de tamaño de memoria que pueden contener, por ejemplo veamos el ",e("span",{children:"int"}),", en C el tamaño de un int puede variar dependiendo de la plataforma y el compilador utilizado. Por lo general, suele tener un rango de valores que va desde aproximadamente de -32,768 a 32,767. Para ver de mejor manera las diferencias mira la siguiente tabla:"]}),e("div",{className:"contenedor-tabla",children:e("table",{children:a("tbody",{children:[a("tr",{children:[e("th",{children:"Tipo de variable"}),e("th",{children:"Descripción"}),e("th",{children:"Ejemplo"}),e("th",{children:"Rango"}),e("th",{children:"Especificación de formato"})]}),a("tr",{children:[e("td",{children:"int"}),e("td",{children:"Números enteros"}),e("td",{children:"int num = 10;"}),e("td",{children:"-32,768 a 32,767"}),e("td",{children:"%d o %i"})]}),a("tr",{children:[e("td",{children:"float"}),e("td",{children:"Números de punto flotante"}),e("td",{children:"float num = 3.14;"}),e("td",{children:"1.2E-38 a 3.4E+38"}),e("td",{children:"%f"})]}),a("tr",{children:[e("td",{children:"double"}),e("td",{children:"Números de punto flotante de doble precisión"}),e("td",{children:"double num = 3.14159;"}),e("td",{children:"2.3E-308 a 1.7E+308"}),e("td",{children:"%lf"})]}),a("tr",{children:[e("td",{children:"char"}),e("td",{children:"Caracteres"}),e("td",{children:"char letra = 'A';"}),e("td",{children:"0 a 255"}),e("td",{children:"%c"})]}),a("tr",{children:[e("td",{children:"short"}),e("td",{children:"Enteros cortos"}),e("td",{children:"short num = 100;"}),e("td",{children:"-32,768 a 32,767"}),e("td",{children:"%hd"})]}),a("tr",{children:[e("td",{children:"long"}),e("td",{children:"Enteros largos"}),e("td",{children:"long num = 1000000;"}),e("td",{children:"-2,147,483,648 a 2,147,483,647"}),e("td",{children:"%ld"})]}),a("tr",{children:[e("td",{children:"unsigned int"}),e("td",{children:"Números enteros sin signo"}),e("td",{children:"unsigned int num = 20;"}),e("td",{children:"0 a 65,535"}),e("td",{children:"%u"})]})]})})}),e("h3",{className:"titulo-interno",children:"Recordando un poco las comillas"}),e("p",{children:"Es fundamental repasar el tema de las comillas en C. Las comillas tienen un significado especial en el lenguaje y se utilizan para indicar diferentes cosas en distintos contextos."}),a("p",{children:["En primer lugar, al imprimir texto en la consola utilizando la función ",e("span",{children:"printf"}),", se utilizan comillas dobles para delimitar el texto que se desea mostrar. Por ejemplo, al escribir ",e("span",{children:'printf("Hola, mundo!\\n");'}),", las comillas dobles indican que",e("span",{children:' "Hola, mundo!"'})," es una cadena de caracteres que debe mostrarse en la consola."]}),a("p",{children:["Por otro lado, las comillas simples se utilizan para representar valores de tipo caracter. Por ejemplo, al asignar un valor de tipo caracter a una variable, se utiliza una comilla simple alrededor del carácter deseado. Por ejemplo,",e("span",{children:" char letra = 'A';"})," asigna el carácter ",e("span",{children:"'A'"})," a la variable",e("span",{children:" letra"}),". Es importante recordar que los caracteres se representan entre comillas simples, mientras que las cadenas de caracteres se representan entre comillas dobles."]}),a("p",{children:["Finalmente no lo olvides, ",e("span",{children:"'2'"})," no es lo mismo que ",e("span",{children:"2"}),", en C los caracteres se almacenan internamente como valores numéricos según la tabla de caracteres ASCII. Por ejemplo, el carácter 'A' tiene un valor numérico de 65. Es por eso que '2' y 2 no son iguales, porque uno es una cadena de caracteres y el otro es un valor numérico."]})]})]}),e("div",{className:"subtitulo-curso",children:e("h2",{children:"Gestión eficiente de la memoria: El tamaño importa"})}),e("section",{children:a("div",{className:"parrafo-no-flex",children:[e("p",{children:"Ahora hablemos de un aspecto importante en la programación: los bits de memoria que utilizan los diferentes tipos de variables. Piensa en la memoria de tu computadora como una caja llena de pequeños compartimentos, donde cada compartimento puede almacenar un valor. Cada tipo de variable ocupa una cantidad específica de estos compartimentos."}),e("p",{children:"Imagínate que los compartimentos son como celdas de almacenamiento, y cada tipo de variable tiene su tamaño de celda correspondiente. Algunas variables ocupan celdas más grandes, mientras que otras ocupan celdas más pequeñas. ¿Por qué esto es relevante? Bueno, el tamaño de la celda determina cuánta información puedes almacenar en ella."}),e("picture",{children:e("img",{src:d,alt:"celdas"})}),e("p",{children:"En la tabla a continuación, puedes ver los diferentes tipos de variables que hemos estado explorando, pero ahora nos enfocaremos en el tamaño de memoria que utilizan. Recuerda que estos tamaños están en bits, y un bit es la unidad más pequeña de almacenamiento."}),e("div",{className:"contenedor-tabla",children:e("table",{children:a("tbody",{children:[a("tr",{children:[e("th",{children:"Tipo de variable"}),e("th",{children:"Tamaño (en bits)"})]}),a("tr",{children:[e("td",{children:"char"}),e("td",{children:"8"})]}),a("tr",{children:[e("td",{children:"short"}),e("td",{children:"16"})]}),a("tr",{children:[e("td",{children:"int"}),e("td",{children:"32"})]}),a("tr",{children:[e("td",{children:"long"}),e("td",{children:"32 - 64"})]}),a("tr",{children:[e("td",{children:"float"}),e("td",{children:"32"})]}),a("tr",{children:[e("td",{children:"double"}),e("td",{children:"64"})]})]})})}),e("p",{children:"Observa cómo cada tipo de variable ocupa una cantidad específica de bits en la memoria. Esto es importante porque afecta la cantidad de información que puedes almacenar y la precisión de los valores que puedes representar. Al utilizar variables en tus programas, debes tener en cuenta el tamaño de memoria que necesitas para tus datos, si usas un tipo de variable demasiado grande para una pequeña cantidad de información, estarías desperdiciando recursos de memoria. Por otro lado, si usas un tipo de variable demasiado pequeño para datos más grandes, podrías perder precisión o incluso obtener resultados incorrectos."}),e("p",{children:'Así que, al elegir el tipo de variable adecuado, considera tanto el tamaño necesario para tus datos como la precisión requerida en tu programa. ¡Optimizar el uso de memoria es clave para escribir programas eficientes y confiables!" (╹ڡ╹ )'})]})}),e("div",{className:"subtitulo-curso",children:e("h2",{children:"operadores y expresiones"})}),a("section",{children:[e("h3",{className:"titulo-interno",style:{marginTop:"1rem"},children:"Operadores"}),a("div",{className:"parrafo-no-flex",children:[e("p",{children:"Como recordarás del curso de fundamentos, los operadores son símbolos especiales que nos permiten realizar diversas acciones, como sumar, restar, comparar valores y más. A continuación, te presento una código un poco particular con algunos operadores comunes y ejemplos de su uso:"}),e(n,{img:p,url:"https://replit.com/@izicodeoficial/Operadores-simples-1#main.c"}),a("p",{children:["En este código, hemos declarado dos variables ",e("span",{children:"numeroA"})," y ",e("span",{children:"numeroB"}),"con los valores 12 y 7 respectivamente. Luego, utilizamos la función printf para imprimir los resultados de las diferentes operaciones matemáticas. En la función printf, utilizamos la secuencia de formato ",e("span",{children:"%d"})," para indicar que queremos imprimir valores enteros. Los valores que queremos imprimir se pasan como argumentos después de la cadena de formato, en el mismo orden en el que aparecen en la cadena. Por ejemplo, ",e("span",{children:"%d + %d = %d"})," representa una cadena de formato que espera tres valores enteros para imprimir."]}),e("p",{children:"Pero sucede algo curioso en el caso de la división con el resultado que nos da (•_•), por lo que te propongo que intentes descubrir el porqué sucede eso experimentando un poco con todo lo que hemos aprendido hasta el momento, o también puedes probar el siguiente código y te ayude a entender mejor lo que sucede:"}),e(n,{img:m,url:"https://replit.com/@izicodeoficial/Operadores-simples-2#main.c"}),e("h3",{className:"titulo-interno",children:"Expresiones"}),e("p",{children:"Recordaras del curso de fundamentos que las expresiones también nos permiten comparar valores utilizando operadores de igualdad (==), desigualdad (!=), menor que (<), mayor que (>), menor o igual que (<=) y mayor o igual que (>=). Además, podemos combinar condiciones utilizando los operadores lógicos AND (&&), OR (||) y NOT (!). Pero como podrás intuir estos los veremos más tarde. (ง •_•)ง"})]})]}),e("div",{className:"subtitulo-curso",children:e("h2",{children:"entrada y salida de datos"})}),e("section",{children:a("div",{className:"parrafo-no-flex",children:[a("p",{children:["A lo largo de esta lección ya hemos visto la ",e("span",{children:"salida de datos"}),", lo hemos estado haciendo por medio de la función ",e("span",{children:"printf"}),", por lo que nos vamos a centrar ahora en la ",e("span",{children:"entrada de datos"}),", la cuál se hace por medio de la función ",e("span",{children:"scanf"}),", el siguiente código te ayudara a entender mejor:"]}),e(n,{img:u,url:"https://replit.com/@izicodeoficial/Salida-de-Datos-1#main.c"}),a("p",{children:["En este ejemplo, utilizamos ",e("span",{children:"scanf"})," con diferentes especificadores de formato, como %d para leer un número entero, %f para leer un número decimal y %c para leer un carácter. Observa que precedemos el especificador de formato con un espacio en blanco en el caso de %c. Esto se hace para evitar la lectura de cualquier carácter de nueva línea residual que pueda quedar en el búfer de entrada."]}),a("p",{children:["Al utilizar scanf, es importante pasar la ",e("span",{children:"dirección de memoria"}),"de la variable donde deseamos almacenar el valor ingresado utilizando el operador ",e("span",{children:"&"}),". Esto permite que scanf pueda modificar directamente el valor de la variable. Ten muy presente que al trabajar con scanf es fundamental asegurarse de que el formato de entrada coincida con el tipo de dato que esperamos recibir. De lo contrario, pueden ocurrir errores en la lectura de los datos."]}),e("div",{className:"tip-flex",children:e(s,{mascota:r.mascota,contenido:r.contenido2})})]})}),e("div",{className:"btn-ejercicio",children:e(l,{to:"ejercicios_resolv_apren_inter_fu",children:e("button",{className:"link-ejercicio",children:"¡vamos a practicar!"})})})]})};export{v as default};
