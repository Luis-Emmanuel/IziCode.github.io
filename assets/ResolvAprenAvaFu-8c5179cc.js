import{j as a,a as e,L as l}from"./index-90995241.js";import{j as o}from"./javiIco-2b9c03bd.js";import{M as n}from"./MascotaTip-6e839c40.js";const s="/assets/homogen-af108f1a.png",i="/assets/heterogen-fd6f6813.png",d="/assets/arrayNumEjem-03cba851.png",c="/assets/DiagramAvaEjem1-fb2adc83.svg",t="/assets/DiagramAvaEjem2-e2eb227d.svg",m="/assets/DiagramAvaEjem3-349505fe.svg",u="/assets/matriz-632f72bf.png",v=()=>{const r={mascota:o,contenido:`
        Te habrás dado cuenta de que en los ESCRIBIR hay mensajes de este estilo "Ingrese el número", i, ":", esto es posible gracias a que el lenguaje de programación permite la concatenación de cadenas de texto y variables utilizando el operador de coma (,). De esta forma, puedes crear un mensaje personalizado que incluya el valor de una variable específica. Además puedes modificar dichos valores, presta atención a los ejemplos para saber como.
        `,contenido2:"Existen operaciones como agregar o eliminar elementos en un array, pero estas suelen ser más propias de los arrays dinámicos y dependen del lenguaje de programación utilizado. En este momento nos enfocaremos en el uso básico de los arrays estáticos para almacenar y manipular conjuntos de datos de manera más eficiente."};return a("div",{className:"curso-pagina resolv-apren-ava-fu",children:[e("div",{className:"titular-curso",children:e("h1",{children:"resolviendo y aprendiendo nivel: avanzado"})}),e("section",{children:a("div",{className:"parrafo-flex",children:[e("img",{src:o,alt:"javi"}),e("p",{children:"Ya hemos cubierto unas buenas bases de lo que consideramos lo básico para empezar a entender cómo funciona la programación hasta cierto punto, por lo que podemos comenzar a ver temas más complejos y para ello vamos a aplicar todo lo que hemos visto hasta el momento. Presta atención, que las cosas comienzan a complicarse un poco más. (▀̿Ĺ̯▀̿ ̿)"})]})}),e("div",{className:"subtitulo-curso",children:e("h2",{children:"Arrays, como funcionan y como recorrerlos"})}),a("section",{children:[a("div",{className:"parrafo-no-flex",children:[e("p",{children:"En el tema de conceptos básicos hemos mencionado los arreglos o arrays, que son estructuras de datos que permiten almacenar múltiples valores del mismo tipo bajo un mismo nombre. En este momento, profundizaremos en este tema y exploraremos su funcionamiento y cómo se pueden utilizar en la programación."}),a("p",{children:["Dependiendo del lenguaje que utilicemos, puede ser que los arrays sean una colección de elementos ",e("span",{children:"homogéneos"})," o ",e("span",{children:"heterogéneos"}),", siendo que los",e("span",{children:" homogéneos"})," son aquellos en los que todos los elementos del arreglo deben ser del mismo tipo de dato, como enteros, flotantes, caracteres, entre otros. Los elementos del arreglo se almacenan en una posición específica de memoria, y se acceden a ellos utilizando un índice o posición en el arreglo. Lo mismo sucede con los ",e("span",{children:"heterogéneos"}),", siendo la diferencia que en estos, los elementos del arreglo pueden ser de distintos tipos."]}),a("div",{className:"img-caja",children:[a("picture",{children:[e("img",{src:s,alt:"homogen"}),e("span",{children:"homogéneo"})]}),a("picture",{children:[e("img",{src:i,alt:"heterogen"}),e("span",{children:"heterogéneo"})]})]}),a("p",{children:["Por ahora, para evitar confusiones, haremos que nuestros arrays sean del tipo homogéneo. Los arreglos poseen ",e("span",{children:"índices"}),", o como se refiere en inglés,",e("span",{children:" index"}),". El índice del arreglo es un número entero que se utiliza para acceder a un elemento específico del arreglo. El primer elemento del arreglo tiene un índice de 0, el segundo elemento tiene un índice de 1 y así sucesivamente. El último elemento del arreglo tiene un índice de n-1, donde n es el tamaño del arreglo."]}),e("picture",{className:"ejemplo-array",children:e("img",{src:d,alt:"array-ejemplo-1"})}),e("p",{children:"Para declarar un arreglo en la mayoría de los lenguajes de programación, se utiliza la siguiente sintaxis (la cual también usaremos para nuestros pseudocódigos):"}),e("div",{className:"code-contenedor",children:e("pre",{children:e("code",{children:`
VAR
    Tipo_dato Nombre_arreglo[tamaño];
          `})})}),a("p",{children:["Donde ",e("span",{children:"Tipo_dato"})," es el tipo de dato de los elementos del arreglo,",e("span",{children:"Nombre_arreglo"})," es el nombre que se le dará al arreglo y",e("span",{children:"tamaño"})," es el número de elementos que puede almacenar el arreglo. Una vez que se ha declarado el arreglo, se puede acceder a cada uno de los elementos del arreglo utilizando el índice correspondiente y modificar su valor. Por ejemplo, si se ha declarado un arreglo de enteros llamado numeros, se puede asignar el valor 10 al primer elemento del arreglo de la siguiente manera: ",e("span",{children:"numeros[0] = 10;"})]}),e("div",{className:"code-contenedor",children:e("pre",{children:e("code",{children:`
INICIO

    arreglo[0] = 10;
    arreglo[0] = 20;

FIN
          `})})}),e("p",{children:"En el ejemplo vemos que accedemos a la posición 0 en 2 ocasiones para asignarle un valor, pues como sucede en la reasignación de valores en las variables, la posición 0 del array ahora tendrá el valor de 20. Ten presente eso, ya que es algo muy común de hacer al momento de trabajar con arrays."}),e("h3",{className:"titulo-interno",children:"Recorriendo arrays"}),e("p",{children:"También es posible recorrer un arreglo utilizando ciclos como el for, el while o el do-while, para realizar operaciones en cada uno de los elementos del arreglo, de esta manera se pueden utilizar los arreglos para almacenar y manipular grandes cantidades de datos de manera eficiente y organizada. (╹ڡ╹ )"}),e("p",{children:"Pero basta de explicaciones vamos a comenzar a resolver un par de problemas para entender mejor este tema, empezando por el siguiente: Queremos crear un programa que solicite al usuario ingresar 5 números enteros y luego muestre por pantalla la suma de todos ellos. En este caso, podemos utilizar un arreglo de tamaño 5 para almacenar los números ingresados por el usuario y luego utilizar un bucle for para recorrer el arreglo y sumar todos sus elementos."}),e("p",{children:"Empezando por el algoritmo que sería algo así:"}),e("div",{className:"lista-no-flex",children:a("ol",{children:[e("li",{children:'1. Declarar un arreglo llamado "numeros" de tamaño 5.'}),e("li",{children:'2. Inicializar una variable "suma" en 0.'}),e("li",{children:'3. Utilizar un bucle for para pedir al usuario que ingrese los 5 números y almacenarlos en el arreglo "numeros".'}),e("li",{children:'4. Recorrer el arreglo "numeros" utilizando un bucle for, sumando cada uno de sus elementos a la variable "suma".'}),e("li",{children:'5. Mostrar por pantalla la variable "suma".'})]})}),e("p",{children:"El diagrama de flujo de esta manera:"}),e("picture",{className:"diagrama-flujo-ejemplo",children:e("img",{src:c,alt:"diagrama-ejemplo-avanzado-1"})}),e("p",{children:"Finalmente el pseudocódigo:"}),e("div",{className:"code-contenedor",children:e("pre",{children:e("code",{children:`
ALGORITMO SumaDeNumeros;

VAR
    numeros: ARRAY[5] DE ENTERO;
    i, suma: ENTERO;

INICIO

    suma = 0;

    Para (i = 1 ; Hasta i == 5 ; Con 1) {
        ESCRIBIR("Ingrese el número", i, ":");
        LEER(numeros[i]);
    }

    Para (i = 1 ; Hasta i == 5 ; Con 1){
        suma = suma + numeros[i];
    }

    ESCRIBIR("La suma de los números ingresados es: ", suma);

FIN
          `})})})]}),a("div",{className:"parrafo-tip-flex",children:[a("div",{className:"parrafo",children:[a("p",{children:["Explicando un poco el como funciona este presudocódigo, lo que sucede es que se utiliza un bucle ",e("span",{children:'"Para"'})," para recorrer el array ",e("span",{children:'"numeros"'})," y almacenar los valores ingresados por el usuario en cada posición del array. En este bucle, se utiliza la variable ",e("span",{children:'"i"'})," como contador, que va desde 1 hasta 5, y se utiliza la función ",e("span",{children:'"ESCRIBIR"'})," para solicitar al usuario que ingrese cada número, y la función ",e("span",{children:'"LEER"'})," para almacenar el número ingresado por el usuario en la posición correspondiente del array."]}),a("p",{children:['Luego, se utiliza otro bucle "Para" para recorrer el array ',e("span",{children:'"numeros"'})," y sumar cada uno de los valores. En este bucle, también se utiliza la variable",e("span",{children:'"i"'})," como contador, que va desde 1 hasta 5, y se suma el valor almacenado en cada posición del array ",e("span",{children:'"numeros"'})," a la variable ",e("span",{children:'"suma"'}),"."]}),a("p",{children:["Finalmente, se utiliza la función ",e("span",{children:'"ESCRIBIR"'})," para mostrar al usuario la suma de todos los números ingresados."]})]}),e(n,{mascota:r.mascota,contenido:r.contenido})]}),a("div",{className:"parrafo-no-flex",children:[e("p",{children:"Veamos otro problema para terminar de entender este tema, supongamos que queremos crear un programa que solicite al usuario ingresar la cantidad de estudiantes en una clase y luego pida al usuario que ingrese las notas de cada estudiante. En este caso, podemos utilizar un arreglo de tamaño igual a la cantidad de estudiantes para almacenar las notas ingresadas por el usuario y luego utilizar un bucle for para recorrer el arreglo y calcular la nota promedio."}),e("p",{children:"El algoritmo quedaría de esta manera:"}),e("div",{className:"lista-no-flex",children:a("ol",{children:[e("li",{children:"1. Pedir al usuario que ingrese la cantidad de estudiantes."}),e("li",{children:'2. Declarar un arreglo llamado "notas" de tamaño igual a la cantidad de estudiantes ingresada por el usuario.'}),e("li",{children:'3. Inicializar una variable "suma" en 0.'}),e("li",{children:'4. Utilizar un bucle for para pedir al usuario que ingrese la nota de cada estudiante y almacenarla en el arreglo "notas".'}),e("li",{children:'5. Recorrer el arreglo "notas" utilizando un bucle for, sumando cada una de sus notas a la variable "suma".'}),e("li",{children:'6. Calcular la nota promedio dividiendo la variable "suma" por la cantidad de estudiantes.'}),e("li",{children:"7. Mostrar por pantalla la nota promedio."})]})}),e("p",{children:"El diagrama de flujo de esta manera:"}),e("picture",{className:"diagrama-flujo-ejemplo",children:e("img",{src:t,alt:"diagrama-ejemplo-avanzado-2"})}),e("p",{children:"Finalmente el pseudocódigo sería:"}),e("div",{className:"code-contenedor",children:e("pre",{children:e("code",{children:`
ALGORITMO NotaPromedio;

VAR
    cantidadEstudiantes, i: ENTERO;
    notas: ARRAY[cantidadEstudiantes] DE ENTERO;
    suma, promedio: FLOTANTE;

INICIO

    ESCRIBIR("Ingrese la cantidad de estudiantes: ");
    LEER(cantidadEstudiantes);

    Para (i = 0 ; Hasta i < cantidadEstudiantes ; Con 1) {
        ESCRIBIR("Ingrese la nota del estudiante ", i + 1, ": ");
        LEER(notas[i]);
        suma = suma + notas[i];
    }

    promedio = suma / cantidadEstudiantes;

    ESCRIBIR("La nota promedio de la clase es: ", promedio);

FIN
          `})})})]})]}),e("div",{className:"subtitulo-curso",children:e("h2",{children:"Arrays dinámicos y estáticos"})}),e("section",{children:a("div",{className:"parrafo-tip-flex",children:[a("div",{className:"parrafo",children:[a("p",{children:["En programación, existen dos tipos de arreglos o arrays: ",e("span",{children:"estáticos"})," y",e("span",{children:" dinámicos"}),". Los arreglos estáticos son aquellos cuyo tamaño se define en tiempo de compilación y no puede ser modificado durante la ejecución del programa, básicamente son los que hemos trabajado en los problemas anteriores donde definimos arrays con un tamaño definido."]}),e("p",{children:"Por otro lado, los arreglos dinámicos son aquellos cuyo tamaño se define en tiempo de ejecución y pueden crecer o disminuir en tamaño durante la ejecución del programa. Estos arreglos son más flexibles que los estáticos, ya que permiten cambiar su tamaño en tiempo real según las necesidades del programa. Sin embargo, su implementación depende del lenguaje de programación que se esté utilizando y puede variar entre ellos."}),e("p",{children:"Es importante mencionar que para nuestros propósitos, nos centraremos en el uso de arreglos estáticos ya que suelen ser más simples y fáciles de entender para quienes están iniciando en programación."})]}),e(n,{mascota:r.mascota,contenido:r.contenido2})]})}),e("div",{className:"subtitulo-curso",children:e("h2",{children:"Matrices, como funcionan y como recorrerlas"})}),e("section",{children:a("div",{className:"parrafo-no-flex",children:[e("p",{children:"Ya hemos visto que los arreglos son estructuras de datos que permiten almacenar un conjunto de valores del mismo tipo en una dimensión. Ahora, hablaremos de las matrices, que son una extensión de los arreglos y permiten almacenar elementos en dos o más dimensiones, en otras palabras, una matriz es un arreglo bidimensional que está compuesto por filas y columnas. Cada elemento de la matriz se identifica por un par de índices, uno para la fila y otro para la columna."}),e("picture",{children:e("img",{src:u,alt:"matriz-ejemplo"})}),e("p",{children:"Por ejemplo, si queremos almacenar las notas de varios estudiantes en diferentes materias, podemos crear una matriz donde cada fila representa a un estudiante y cada columna representa una materia. De esta manera, podemos acceder a las notas de un estudiante en una materia determinada a través de su índice de fila y columna correspondiente."}),e("p",{children:"La sintaxis para declarar una matriz es similar a la de los arreglos, solo que se utiliza una coma para separar las dimensiones. Por ejemplo, para declarar una matriz de 3 filas y 4 columnas de enteros, podemos hacerlo de la siguiente manera:"}),e("div",{className:"code-contenedor",children:e("pre",{children:e("code",{children:`
VAR
    matriz: MATRIZ[3][4] DE ENTERO;
          `})})}),e("p",{children:"De esta manera, se reserva memoria para una matriz de 3 filas y 4 columnas de enteros, y se puede acceder a cada elemento de la matriz utilizando dos índices, uno para la fila y otro para la columna. Por ejemplo, para asignar el valor 8 al elemento de la segunda fila y tercera columna de la matriz, podemos hacerlo de la siguiente manera:"}),e("div",{className:"code-contenedor",children:e("pre",{children:e("code",{children:`
INICIO

    matriz[1][2] = 8;

FIN
          `})})}),e("p",{children:"Es importante recordar que en las matrices, el índice de fila y columna empieza en 0, es decir, la primera fila o columna tiene un índice de 0, la segunda fila o columna tiene un índice de 1, y así sucesivamente."}),e("h3",{className:"titulo-interno",children:"Recorriendo matrices"}),e("p",{children:"Al igual que con los arreglos, también se pueden recorrer las matrices utilizando bucles, sin embargo, al tratarse de una estructura de datos en dos dimensiones, se requiere de bucles anidados para poder acceder a cada uno de sus elementos. Por ejemplo, para recorrer una matriz de 3 filas y 3 columnas, se podría utilizar el siguiente código:"}),e("div",{className:"code-contenedor",children:e("pre",{children:e("code",{children:`
INICIO

    Para(i = 0 ; Hasta i < 2 ; Con 1){
        Para(j = 0; Hasta j < 2 ; Con 1){
            ESCRIBIR(matriz[ i ][ j ]);
        }
    }

FIN
          `})})}),a("p",{children:["En este caso, se utilizan dos bucles for anidados, uno para recorrer las filas de la matriz y otro para recorrer las columnas. La variable ",e("span",{children:"i"})," representa el índice de las filas y la variable ",e("span",{children:"j"})," el índice de las columnas. En el cuerpo del bucle se puede realizar la acción que se desee con el elemento de la matriz en esa posición. En este ejemplo, simplemente se imprime el valor del elemento."]}),a("p",{children:[e("span",{children:"Importante:"})," debemos tener en cuenta que el número de filas y columnas de la matriz debe ser conocido de antemano para poder recorrerla de manera efectiva."]}),e("p",{children:"Muy bien llego la hora de empezar a resolver un par de problemas, empezando por: Se desea crear un programa que permita a un usuario ingresar una matriz de tamaño 3x3 y luego muestre por pantalla la suma de todos los elementos de la matriz."}),e("p",{children:"El algoritmo a seguir sería:"}),e("div",{className:"lista-no-flex",children:a("ol",{children:[e("li",{children:'1. Declarar una matriz llamada "matriz" de tamaño 3x3.'}),e("li",{children:'2. Inicializar una variable "suma" en 0.'}),e("li",{children:"3. Utilizar dos bucles for anidados para pedir al usuario que ingrese los valores de la matriz."}),e("li",{children:'4. Recorrer la matriz utilizando dos bucles for anidados, sumando cada uno de sus elementos a la variable "suma".'}),e("li",{children:'5. Mostrar por pantalla la variable "suma".'})]})}),e("p",{children:"El diagrama de flujo:"}),e("picture",{className:"diagrama-flujo-ejemplo",children:e("img",{src:m,alt:"diagrama-ejemplo-avanzado-3"})}),e("p",{children:"Finalmente el pseudocódigo:"}),e("div",{className:"code-contenedor",children:e("pre",{children:e("code",{children:`
ALGORITMO SumaMatriz;

VAR
    matriz: MATRIZ[3][3] DE ENTERO;
    i, j, suma: ENTERO;

INICIO

    suma = 0;

    Para (i = 0 ; Hasta i < 3 ; Con 1) {
        Para (j = 0 ; Hasta j < 3 ; Con 1) {
            ESCRIBIR("Ingrese el elemento [", i, "][", j, "]:");
            LEER(matriz[i][j]);
    
            suma = suma + matriz[i][j];
        }
    }

    ESCRIBIR("La suma de los elementos de la matriz es: ", suma);

FIN
          `})})}),a("p",{children:["El pseudocódigo comienza por declarar una matriz de tamaño 3x3 llamada",e("span",{children:' "matriz"'}),", luego se declara una variable ",e("span",{children:'"suma"'})," para almacenar la suma de los elementos de la matriz. A continuación, se utiliza un bucle anidado para pedir al usuario que ingrese los valores de la matriz. El bucle exterior recorre las filas de la matriz y el bucle interior recorre las columnas de la matriz. Dentro del bucle interior se utiliza la función ",e("span",{children:'"LEER" '}),"para asignar el valor ingresado por el usuario a la posición correspondiente de la matriz."]}),a("p",{children:["Después de llenar la matriz, se utiliza otro bucle anidado para recorrer la matriz y sumar todos sus elementos. El bucle exterior recorre las filas de la matriz y el bucle interior recorre las columnas de la matriz, dentro del bucle interior se utiliza la variable ",e("span",{children:'"suma"'})," para ir acumulando el valor de cada elemento. Finalmente, se muestra por pantalla el resultado de la suma de los elementos de la matriz."]}),e("p",{children:"Para comprender aún más este problema, te daré la siguiente prueba de escritorio:"}),e("div",{className:"contenedor-tabla",children:e("table",{children:a("tbody",{children:[a("tr",{children:[e("th",{children:"Iteración"}),e("th",{children:"Elemento[i][j]"}),e("th",{children:"Valor"}),e("th",{children:"Suma"})]}),a("tr",{children:[e("td",{children:"1"}),e("td",{children:"[0][0]"}),e("td",{children:"2"}),e("td",{children:"2"})]}),a("tr",{children:[e("td",{}),e("td",{children:"[0][1]"}),e("td",{children:"4"}),e("td",{children:"6"})]}),a("tr",{children:[e("td",{}),e("td",{children:"[0][2]"}),e("td",{children:"1"}),e("td",{children:"7"})]}),a("tr",{children:[e("td",{children:"2"}),e("td",{children:"[1][0]"}),e("td",{children:"5"}),e("td",{children:"12"})]}),a("tr",{children:[e("td",{}),e("td",{children:"[1][1]"}),e("td",{children:"3"}),e("td",{children:"15"})]}),a("tr",{children:[e("td",{}),e("td",{children:"[1][2]"}),e("td",{children:"2"}),e("td",{children:"17"})]}),a("tr",{children:[e("td",{children:"3"}),e("td",{children:"[2][0]"}),e("td",{children:"1"}),e("td",{children:"18"})]}),a("tr",{children:[e("td",{}),e("td",{children:"[2][1]"}),e("td",{children:"6"}),e("td",{children:"24"})]}),a("tr",{children:[e("td",{}),e("td",{children:"[2][2]"}),e("td",{children:"3"}),e("td",{children:"27"})]})]})})})]})}),e("div",{className:"subtitulo-curso",children:e("h2",{children:"Una Reflexión para Desarrolladores"})}),e("section",{children:a("div",{className:"parrafo-no-flex",children:[e("p",{children:"Durante este curso, hemos especificado qué bucle o estructura de control utilizar para resolver cada problema. Sin embargo, es importante tener en cuenta que en el mundo real, a menudo enfrentaremos problemas que requieren un enfoque más flexible y creativo. No siempre recibiremos instrucciones detalladas sobre qué bucle usar. En su lugar, deberemos analizar el problema, comprender su naturaleza y determinar cuál es la mejor manera de abordarlo."}),e("p",{children:"Esto implica aplicar nuestro pensamiento lógico y habilidades de programación para tomar decisiones informadas. Podemos considerar la eficiencia, la legibilidad del código, la escalabilidad y otros factores relevantes al elegir la mejor solución. A veces, esto puede implicar combinar diferentes bucles, estructuras de control o incluso utilizar enfoques algorítmicos más complejos."}),e("p",{children:"Por lo tanto, es esencial desarrollar nuestra capacidad para analizar y resolver problemas de manera autónoma. A medida que ganamos experiencia, adquirimos la confianza necesaria para tomar decisiones informadas y encontrar las soluciones más adecuadas para cada situación. Recuerda, la programación es un proceso creativo y versátil que nos brinda la libertad de adaptarnos y encontrar soluciones únicas e innovadoras."})]})}),e("div",{className:"subtitulo-curso",children:e("h2",{children:"prácticas y ejercicios"})}),e("section",{children:e("div",{className:"parrafo-no-flex",children:e("p",{children:"Con todo lo visto hasta el momento, creo que ya estamos más que listos para que comiences a resolver por tu cuenta algunos ejercicios. Deberás intentar seguir las instrucciones de cada problema y hacer lo que se te pida en cada uno, recuerda que de igual manera te dejaré las posibles soluciones a cada problema por si en algún momento te atoras puedas echar un vistazo, pero trata de resolver todo por tu cuenta. (▀̿Ĺ̯▀̿ ̿)"})})}),e("div",{className:"btn-ejercicio",children:e(l,{to:"ejercicios_resolv_apren_avan_fu",children:e("button",{className:"link-ejercicio",children:"comenzar ejercicios nivel: avanzado"})})})]})};export{v as default};
