import{j as a,a as e}from"./index-05365979.js";import{p as r}from"./pymuIco-54c3c2da.js";import{c as s}from"./ejercicio-51ad8792.js";import{M as i}from"./MascotaTip-ec587e15.js";import{O as n,e as c}from"./OpcionMultipleCard-a714fa6b.js";import"./index.esm-d3bd80fb.js";const l="/assets/logica-57e1d205.png",d="/assets/logica2-c28be622.png",t="/assets/decision-133e6843.png",u="/assets/adaptacion-e26190cb.png",p="/assets/agil-caece5f0.png",q=()=>{const o={mascota:r,contenido:`
        Puedes empezar a desarrollar tu lógica a través de diversas actividades, comenzando por resolver ejercicios y problemas de lógica. También puedes jugar juegos como sudokus, ajedrez, rompecabezas, etc. Incluso puedes empezar por buscar patrones en las cosas cotidianas que te rodean, como los números de las matrículas de los carros o las formas de las nubes en el cielo.
        `};return a("div",{className:"curso-pagina logica-fu",children:[e("div",{className:"titular-curso",children:e("h1",{children:"lógica en la programación"})}),e("section",{children:a("div",{className:"parrafo-flex",children:[e("img",{src:r,alt:"pymu"}),e("p",{children:"Ahora que ya hemos visto varios de los conceptos básicos para comprender el mundo de la programación, nos gustaría introducirte en algo clave y que todo programador debe desarrollar a lo largo de sus estudios, y eso es la lógica de programación. La lógica de programación es lo que nos permitirá resolver problemas, así que comencemos a aprender al respecto. (⌐■_■)"})]})}),e("div",{className:"subtitulo-curso",children:e("h2",{children:"¿qué es la lógica?"})}),a("section",{children:[e("div",{className:"parrafo-no-flex",children:e("p",{children:"La lógica es la ciencia que estudia los principios y métodos para distinguir un razonamiento correcto de uno incorrecto. En programación, la lógica es esencial ya que se utiliza para la resolución de problemas mediante la aplicación de reglas y procedimientos lógicos para llegar a una conclusión. La lógica permite a los programadores diseñar y crear algoritmos, que son una serie de pasos lógicos que deben seguirse para resolver un problema específico."})}),a("div",{className:"parrafo-flex",children:[e("picture",{children:e("img",{src:l,alt:"logica"})}),e("p",{children:"Además, la lógica es importante en la programación porque los programas deben funcionar de manera lógica y coherente para que sean útiles y eficaces. Si un programa no sigue un razonamiento lógico, puede tener errores o comportamientos inesperados. Por lo tanto, es crucial que los programadores comprendan y apliquen la lógica de manera efectiva en su trabajo. (⊙ˍ⊙)"})]})]}),e("div",{className:"subtitulo-curso",children:e("h2",{children:"¿cómo se aplica en la resolución de problemas?"})}),a("section",{children:[a("div",{className:"parrafo-no-flex",children:[e("p",{children:"La lógica es fundamental para la resolución de problemas en programación. Al escribir un programa, el objetivo es hacer que la computadora siga una serie de instrucciones para alcanzar un resultado deseado. Sin embargo, a menudo se presentan situaciones en las que el programa debe tomar decisiones o elegir entre varias opciones para alcanzar ese resultado."}),e("picture",{children:e("img",{src:d,alt:"logica2"})})]}),a("div",{className:"parrafo-tip-flex",children:[e("div",{className:"parrafo",children:a("p",{children:["Es aquí donde entra en juego la lógica. Los programadores utilizan la lógica para establecer condiciones que guíen al programa en la toma de decisiones. Por ejemplo, si un programa está diseñado para calcular el precio de un producto, la lógica puede utilizarse para determinar si el producto tiene un descuento o no, o si el impuesto se debe aplicar o no.",e("br",{}),e("br",{}),"Además, la lógica es fundamental para la depuración de programas. Cuando un programa no funciona como se espera, el programador debe analizar el código para encontrar el error. Esto implica la identificación de problemas lógicos, como la falta de una condición adecuada o la presencia de una condición incorrecta."]})}),e(i,{mascota:o.mascota,contenido:o.contenido})]})]}),e("div",{className:"subtitulo-curso",children:e("h2",{children:"operadores lógicos"})}),e("section",{children:a("div",{className:"parrafo-no-flex",children:[e("p",{children:"Los operadores lógicos son herramientas fundamentales en la programación para la evaluación de expresiones lógicas. A continuación, te explico los tres operadores lógicos principales:"}),e("div",{className:"lista-no-flex",children:a("ol",{children:[a("li",{children:[e("span",{children:"1. Operador lógico AND:"})," es el operador que se utiliza para evaluar si dos expresiones lógicas son verdaderas al mismo tiempo. En otras palabras, si la expresión A AND B es verdadera, esto significa que tanto A como B deben ser verdaderos. En caso contrario, si alguna de las dos expresiones es falsa, entonces el resultado de la expresión A AND B será falso."]}),a("li",{children:[e("span",{children:"2. Operador lógico OR:"})," es el operador que se utiliza para evaluar si al menos una de dos expresiones lógicas es verdadera. En otras palabras, si la expresión A OR B es verdadera, esto significa que al menos una de las dos expresiones debe ser verdadera. Solo en el caso en que ambas expresiones sean falsas, el resultado de la expresión A OR B será falso."]}),a("li",{children:[e("span",{children:"3. Operador lógico NOT:"})," es el operador que se utiliza para negar el valor de una expresión lógica. En otras palabras, si la expresión NOT A es verdadera, esto significa que la expresión A es falsa. De manera similar, si la expresión NOT A es falsa, esto significa que la expresión A es verdadera."]})]})}),e("p",{children:"Los operadores lógicos se utilizan frecuentemente en la programación para evaluar condiciones complejas y tomar decisiones en consecuencia. Es importante tener un buen entendimiento de estos operadores para poder construir expresiones lógicas efectivas en el código."}),e("h3",{className:"titulo-interno",children:"Ejemplos de cada uno (ง •_•)ง"}),e("div",{className:"lista-no-flex",children:a("ol",{children:[a("li",{children:[e("span",{children:"1.Ejemplo de AND:"})," Supongamos que queremos verificar si una persona puede conducir un automóvil. Para esto, necesitamos asegurarnos de que tenga la edad suficiente y que tenga una licencia de conducir válida. En este caso, podemos utilizar el operador lógico AND para evaluar ambas condiciones al mismo tiempo. Si el resultado es verdadero, entonces la persona puede conducir, en caso contrario, no puede."]}),a("li",{children:[e("span",{children:"2. Ejemplo de OR:"})," Supongamos que queremos verificar si un estudiante ha aprobado un examen. En algunos casos, el estudiante puede haber aprobado el examen con una nota alta, mientras que en otros casos puede haber aprobado el examen con una nota baja pero aún suficiente. En este caso, podemos utilizar el operador lógico OR para evaluar ambas condiciones. Si el estudiante ha obtenido una nota alta O una nota suficiente, entonces habrá aprobado el examen."]}),a("li",{children:[e("span",{children:"3. Ejemplo de NOT:"})," Supongamos que queremos verificar si un estudiante ha aprobado un examen. En algunos casos, el estudiante puede haber aprobado el examen con una nota alta, mientras que en otros casos puede haber aprobado el examen con una nota baja pero aún suficiente. En este caso, podemos utilizar el operador lógico OR para evaluar ambas condiciones. Si el estudiante ha obtenido una nota alta O una nota suficiente, entonces habrá aprobado el examen."]})]})}),e("p",{children:"Es importante que sepas que los operadores lógicos son muy útiles en la programación, ya que permiten evaluar condiciones y tomar decisiones. Además, es importante que entienda que los operadores lógicos siempre devuelven un resultado booleano (verdadero o falso), y que se pueden utilizar en conjunto con otros operadores y estructuras de control, como las estructuras condicionales (if-else) y los bucles (while, for)."}),e("p",{children:"Seguro que en este momento te estarás preguntando qué son las estructuras condicionales y los bucles, pero no te preocupes, en breve te explicaré de manera general en qué consiste cada uno. En el próximo tema empezaremos a profundizar en ellos y pondremos en práctica todos los conocimientos que has ido adquiriendo a lo largo de estos primeros temas. ( •̀ ω •́ )✧"})]})}),e("div",{className:"subtitulo-curso",children:e("h2",{children:"un vistazo a los condicionales y bucles"})}),e("section",{children:a("div",{className:"parrafo-no-flex",children:[e("p",{children:"Las estructuras de control de flujo son fundamentales en la programación, ya que permiten controlar el flujo de un programa y tomar decisiones en función de ciertas condiciones. En particular, las estructuras de control de flujo que se utilizan con mayor frecuencia son la estructura condicional if-else y los bucles while y for."}),e("picture",{children:e("img",{src:t,alt:"decision"})}),e("p",{children:"La estructura condicional if-else se utiliza para ejecutar un bloque de código si se cumple una determinada condición, y otro bloque de código si no se cumple. Es decir, permite tomar decisiones en función de una condición booleana. Por ejemplo, se puede utilizar una estructura condicional para verificar si un número es positivo o negativo, y ejecutar diferentes bloques de código en cada caso."}),e("picture",{children:e("img",{src:u,alt:"condicion"})}),e("p",{children:"Los bucles while y for se utilizan para ejecutar un bloque de código varias veces, mientras se cumpla una determinada condición. La diferencia entre ambos es que el bucle while se ejecuta mientras se cumpla la condición, y el bucle for se utiliza para iterar sobre una secuencia (por ejemplo, una lista o un rango de números) y ejecutar un bloque de código para cada elemento de la secuencia. Los bucles son fundamentales para repetir tareas en un programa de manera eficiente, como por ejemplo leer datos de un archivo o realizar operaciones matemáticas en un conjunto de números."}),e("picture",{children:e("img",{src:p,alt:"bucle"})}),e("p",{children:"Es importante destacar que estas estructuras de control de flujo están disponibles en la mayoría de los lenguajes de programación, y que su sintaxis puede variar ligeramente entre ellos. Es fundamental entender su uso y su sintaxis, para poder construir programas complejos y eficientes. Pero como mencioné antes, iremos adentrándonos en esto y cómo funcionan de manera más práctica más adelante. Por el momento, solo quiero que vayas interiorizando los conceptos de todo lo que hemos estado viendo. (⌐■_■)"})]})}),e("div",{className:"subtitulo-curso",children:e("h2",{children:"ejercicios"})}),a("section",{children:[a("div",{className:"parrafo-flex",children:[e("picture",{children:e("img",{src:s,alt:"cerebro"})}),e("p",{children:"Vamos a hacer un mini cuestionario solo para reforzar un poco los conociminetos adquiridos de este capítulo en particular. (⌐■_■)"})]}),e("div",{className:"caja-ejercicios-opcMultiple",children:e(n,{ejercicios:c})})]})]})};export{q as default};
